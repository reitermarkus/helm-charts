---
{{- include "bjw-s.common.loader.init" . }}

# If there's an existing secret, reuse it, otherwise generate a new one.
{{- define "teamspeak.serveradmin-password" -}}
{{- $secret := (lookup "v1" "Secret" .Release.Namespace (include "bjw-s.common.lib.chart.names.fullname" .) ) -}}
  {{- if $secret -}}
    {{-  index $secret "data" "serveradmin_password" -}}
  {{- else -}}
    {{- randAlphaNum 32 | b64enc | quote -}}
  {{- end -}}
{{- end -}}

{{- define "teamspeak.harcodedValues" -}}
# Set the nameOverride based on the release name if no override has been set
{{- if not .Values.global.nameOverride }}
global:
  nameOverride: "{{ .Release.Name }}"
{{- end }}

{{- $mainEnv := .Values.controllers.main.containers.main.env }}
controllers:
  main:
    containers:
      main:
        env:
          {{- if not $mainEnv.TS3SERVER_SERVERADMIN_PASSWORD }}
          TS3SERVER_SERVERADMIN_PASSWORD:
            valueFrom:
              secretKeyRef:
                name: {{ include "bjw-s.common.lib.chart.names.fullname" . }}
                key: serveradmin_password
          {{- end }}
      {{- if .Values.metrics.enabled }}
      exporter:
        enabled: true
        env:
          {{- $value := $mainEnv.TS3SERVER_SERVERADMIN_PASSWORD -}}
          {{- if $value -}}
          {{- if kindIs "map" $value }}
          SERVERQUERY_PASSWORD:
            {{- toYaml $value | nindent 12 }}
          {{- else }}
          SERVERQUERY_PASSWORD: {{ quote $value }}
          {{- end }}
          {{- else }}
          SERVERQUERY_PASSWORD:
            valueFrom:
              secretKeyRef:
                name: {{ include "bjw-s.common.lib.chart.names.fullname" . }}
                key: serveradmin_password
          {{- end }}
      {{- end }}

{{- if .Values.metrics.enabled }}
service:
  metrics:
    enabled: true
{{- end }}
{{- end -}}
{{- $_ := mergeOverwrite .Values (include "teamspeak.harcodedValues" . | fromYaml) -}}

{{/* Render the templates */}}
{{ include "bjw-s.common.loader.generate" . }}
